#ifndef SOLID_ANGLE_H
#define SOLID_ANGLE_H

// class containing functions for calculating number of hits on each optical channel via the solid angle method
// calculates number of VUV hits, using gaisser-hillas corrections for Rayleigh scattering

// calculates number of visible hits via calculating number of hits on the cathode corrected with gaisser-hillas curves then the number
// of hits from the cathode for each optical channel using correction analogous to gaisser-hillas curves

#include <vector>
#include <string>

#include "TF1.h"
#include "TVector3.h"

class semi_analytic_hits {

private:

	// useful constants
	const double pi = 3.141592653589793;

	// detector type flag
	//const std::string flagDetector;

	// *************************************************************************************************
	//                    	OPTICAL DETECTOR SHAPE/SIZE
	// *************************************************************************************************	
	// Supercells: type = 1;
	double y_dimension_detector = 9.3;	// cm
	double z_dimension_detector = 46.8;	// cm
	// PMTs: type = 0; 
	double radius = 8*2.54/2.;	//	8" PMT diameter  // cm

	// structure definition for solid angle of rectangle function
	struct acc{
		// ax,ay,az = centre of rectangle; w = y dimension; h = z dimension
  		double ax, ay, az, w, h; 
	};

	bool _mathmore_loaded_ = false;


	// *************************************************************************************************
	//                    NUMBER OF VUV HITS PARAMETRIZATION
	// *************************************************************************************************
	// VUV hits Gaisser-Hillas Rayleigh scattering correction
	TF1* GH[9];
	//  SBN Gaisser-Hillas
	//const int flagRS;
	const double GH_RS60cm_SBN[4][9] = { {1.31326, 1.28293, 1.24304, 1.13739, 1.03286, 0.904908, 0.779762, 0.654461, 0.525548},
					     {87.5397, 95.0615, 89.6917, 94.9943, 93.9111, 111.708, 114.998, 132.535, 144.225},
					     {57.3686, 59.9412, 53.8011, 56.1887, 63.5782, 61.0104, 66.3173, 63.379, 64.4428},
					     {-200, -200, -200, -200, -200, -200, -200, -200, -200} };
	const double GH_RS120cm_SBN[4][9] = { {1.16866, 1.13776, 1.08677, 0.993735, 0.885896, 0.760942, 0.628574, 0.498151, 0.37109}, 
					      {86.5078, 96.3383, 90.7074, 97.8305, 99.7487, 119.343, 129.554, 148.349, 174.775}, 
					      {88.0653, 89.4535, 82.9928, 84.9811, 93.5736, 89.2581, 93.4002, 91.709, 86.177}, 
					      {-200, -200, -200, -200, -200, -200, -200, -200, -200} };
	const double GH_RS180cm_SBN[4][9] = { {1.11436, 1.08245, 1.02718, 0.939834, 0.83028, 0.704374, 0.566687, 0.430942, 0.299605}, 
					      {85.1942, 95.5351, 90.6834, 98.2426, 102.794, 123.284, 135.601, 153.886, 189.781}, 
					      {118.062, 119.348, 111.604, 112.464, 121.064, 114.846, 120.385, 119.249, 106.702}, 
					      {-200, -200, -200, -200, -200, -200, -200, -200, -200} };
	//  DUNE-SP Gaisser-Hillas							
	const double GH_RS60cm_SP[4][9] = { {1.37378, 1.3634, 1.31054, 1.23488, 1.14697, 1.01977, 0.886863, 0.751005, 0.592496}, 
					     {113.764, 128.753, 122.512, 141.309, 140.16, 153.797, 170.915, 184.999, 199.248}, 
					     {81.3747, 78.791, 87.2706, 81.9593, 92.3303, 102.592, 110.304, 112.577, 107.575}, 
					     {-200, -200, -200, -200, -200, -200, -200, -200, -200} };

	const double GH_RS120cm_SP[4][9] = { {1.22881, 1.20776, 1.15355, 1.08087, 0.988751, 0.868487, 0.736578, 0.604445, 0.465248}, 
					     {120.126, 137.211, 129.695, 150.215, 151.926, 168.741, 199.556, 223.586, 260.437}, 
					     {120.445, 115.844, 127.995, 114.96, 130.093, 141.39, 147.55, 154.139, 136.948}, 
					     {-200, -200, -200, -200, -200, -200, -200, -200, -200} }; 
	const double GH_RS180cm_SP[4][9] = { {1.16447, 1.14188, 1.08141, 1.00912, 0.911832, 0.793711, 0.656118, 0.517022, 0.38575}, 
					     {120.862, 138.321, 129.506, 152.468, 154.87, 171.04, 210.579, 240.266, 297.42}, 
					     {156.572, 146.229, 173.181, 147.513, 165.223, 175.133, 182.79, 211.805, 173.369}, 
					     {-200, -200, -200, -200, -200, -200, -200, -200, -200} };
	//  DUNE-DP Gaisser-Hillas
	const double GH_RS60cm_DP[4][9] = { {1.2378, 1.24291, 1.20084, 1.13647, 1.04805, 0.928209, 0.81468, 0.687154, 0.538787}, 
					     {95.9886, 105.046, 114.902, 121.08, 126.533, 142.666, 143.314, 156.796, 159.649}, 
					     {170.762, 161.485, 146.444, 136.313, 128.357, 112.543, 106.582, 88.2847, 81.1439}, 
					     {-200, -200, -200, -200, -200, -200, -200, -200, -200} };
	const double GH_RS120cm_DP[4][9] = { {1.15393, 1.13664, 1.09137, 1.02059, 0.927886, 0.800404, 0.675405, 0.544569, 0.410451}, 
					     {120.77, 131.444, 136.192, 143.061, 153.195, 168.244, 176.448, 189.741, 209.645}, 
					     {250.962, 234.726, 217.918, 202.817, 185.121, 167.992, 156.201, 133.598, 111.581}, 
					     {-200, -200, -200, -200, -200, -200, -200, -200, -200} }; 
	const double GH_RS180cm_DP[4][9] = { {1.11356, 1.09376, 1.04515, 0.969378, 0.873762, 0.741592, 0.613477, 0.476078, 0.344799}, 
					     {129.151, 146.954, 147.726, 155.173, 166.108, 180.721, 193.948, 206.119, 240.13}, 
					     {321.246, 291.538, 278.321, 258.852, 234.141, 219.926, 197.511, 175.507, 139.981}, 
					     {-200, -200, -200, -200, -200, -200, -200, -200, -200} };

	// bin size of the offset angle used in the parametrization in degrees
	const double delta_angulo = 10.;
	// LAr absorption length in cm
	const double L_abs = 2000.;


	// *************************************************************************************************
	//                    NUMBER OF VIS HITS PARAMETRIZATION
	// *************************************************************************************************
	// properties of LAr for reflected light path calculation
	// refractive indices in LAr
	const double n_LAr_VUV = 2.632;     // effective index due to group vel.
	const double n_LAr_vis = 1.23;

	// Detector properties: 
	
	// plane depth
	// Dune
	const double plane_depth = 363.38405;	// cm 
	
	// Cathode plane covered by foils
	// Dune
	// size
	const double y_dimension_foils = 1204.7255 + 5.466;	// cm		// 2 panels y height 602.36275 with 5.466cm gaps between
	const double z_dimension_foils = 1359.144 + 35.196;	// cm		// 6 panels of z width 226.524cm with 5.866cm gaps between them
	
	// centre coordinates
	// Dune
	const double x_foils = 363.38405; const double y_foils = 0; const double z_foils = 696.294;	// cm

	// Visible hits correction [preliminary]
	TF1* VIS_pol[9];
	TF1* VIS_pol_crowns[9];
	const double delta_angle = 10.;

	// DUNE SP parameters [Arapuca/supercell, front window only, no reflections] [preliminary]
	const double VIS_RS60cm_SP[6][9] = { {1.74822,1.66317,1.52748,1.2928,1.04857,0.73864,0.48047,0.48047,0.48047},
		{-0.0215532,-0.0194171,-0.0174866,-0.0131815,-0.0103439,-0.006423,-0.00430898,-0.00430898,-0.00430898},
		{0.000168414,0.000144778,0.000135693,9.62927e-05,8.14745e-05,4.83277e-05,3.55259e-05,3.55259e-05,3.55259e-05},
		{-7.42352e-07,-6.12653e-07,-6.06784e-07,-4.07129e-07,-3.70608e-07,-2.11691e-07,-1.67545e-07,-1.67545e-07,-1.67545e-07},
		{1.70944e-09,1.37257e-09,1.44409e-09,9.30999e-10,9.02405e-10,5.17451e-10,4.29214e-10,4.29214e-10,4.29214e-10},
		{-1.59149e-12,-1.26097e-12,-1.40324e-12,-8.87215e-13,-9.01906e-13,-5.33724e-13,-4.46093e-13,-4.46093e-13,-4.46093e-13}};
	
	/*
	// ** 7m drift **
	// RS60cm
	const double VIS_RS60cm_SP[6][9] = { {1.40583,1.15359,1.25194,1.54649,1.70694,1.99575,1.99575,1.99575,1.99575},
	{-0.0073011,-0.00344252,-0.00411537,-0.00622707,-0.00588044,-0.00674468,-0.00674468,-0.00674468,-0.00674468},
	{3.21944e-05,1.0809e-05,1.46532e-05,2.42112e-05,2.14304e-05,2.87278e-05,2.87278e-05,2.87278e-05,2.87278e-05},
	{-9.17456e-08,-3.63564e-08,-4.78928e-08,-7.18351e-08,-6.77508e-08,-9.91708e-08,-9.91708e-08,-9.91708e-08,-9.91708e-08},
	{1.3461e-10,6.7504e-11,8.3892e-11,1.15271e-10,1.1713e-10,1.72574e-10,1.72574e-10,1.72574e-10,1.72574e-10},
	{-7.49764e-14,-4.42768e-14,-5.28968e-14,-6.92522e-14,-7.38904e-14,-1.074e-13,-1.074e-13,-1.074e-13,-1.074e-13} };	
	*/

	// DUNE SP border correction [Arapuca/supercell, front window only] [preliminary]
	const std::vector<double> vDistances_x = {10, 40, 80, 120, 160, 200, 240, 280, 320, 350};			// cm	[10]
	const std::vector<double> vDistances_y = {31, 218, 405, 467, 530, 592};								// cm	[6]

	const std::vector<std::vector<std::vector<double>>> VIS_RS60_SP_Borders = { 
		{ {1.24617,1.18308,1.14987,1.13654,1.10285,1.08773,1.08614,1.08499,1.07354,1.0917,},
		  {1.32089,1.31105,1.27868,1.27235,1.26873,1.26187,1.26802,1.28521,1.30572,1.34255,},
		  {1.66006,1.52316,1.45154,1.43562,1.41332,1.39515,1.38434,1.3648,1.315,1.30846,},
		  {1.66952,1.56274,1.53029,1.53274,1.5223,1.5406,1.54817,1.54476,1.50354,1.48217,},
		  {1.63181,1.54492,1.52336,1.58176,1.63423,1.68852,1.76146,1.82997,1.82849,1.822,},
		  {1.23127,1.17828,1.19836,1.24869,1.33582,1.4506,1.59703,1.76268,1.91793,1.93014,}
		},
		{ {1.2002,1.16482,1.12489,1.10484,1.08416,1.06873,1.0609,1.05406,1.03495,1.05975,},
		  {1.39393,1.30922,1.22195,1.19341,1.16012,1.1408,1.13114,1.11888,1.09758,1.11402,},
		  {1.64128,1.55778,1.48454,1.46729,1.43842,1.42193,1.40964,1.38888,1.34596,1.34083,},
		  {1.76892,1.66828,1.60779,1.62136,1.63073,1.64105,1.66362,1.66073,1.62757,1.62625,},
		  {1.53193,1.46817,1.46947,1.49594,1.54701,1.57507,1.65394,1.70033,1.68362,1.68011,},
		  {1.07947,1.03975,1.05432,1.11225,1.17218,1.27005,1.3946,1.53425,1.66683,1.72377,}
		},
		{ {1.19109,1.09233,1.05586,1.04094,1.03055,1.01312,1.00363,1.0047,0.990914,1.00267,},
		  {1.39489,1.23963,1.17014,1.13679,1.11956,1.09967,1.08926,1.08117,1.06719,1.07162,},
		  {1.8215,1.63091,1.55202,1.55418,1.55686,1.55205,1.54753,1.54427,1.52841,1.52581,},
		  {1.63142,1.45809,1.39851,1.38499,1.3872,1.40266,1.38838,1.39475,1.35807,1.34161,},
		  {1.37843,1.27269,1.24428,1.27329,1.31814,1.34477,1.38242,1.39327,1.36569,1.33572,},
		  {1.03882,0.972262,0.986684,1.0288,1.09043,1.18204,1.28275,1.42912,1.56512,1.61258,}
		},
		{ {1.08271,1.04902,1.00381,0.98066,0.962115,0.952854,0.946826,0.938337,0.930228,0.948209,},
		  {1.28313,1.19221,1.1087,1.07529,1.04917,1.03225,1.0238,1.01429,1.0073,1.0179,},
		  {1.50284,1.40823,1.3314,1.3128,1.2978,1.29113,1.28648,1.28014,1.26213,1.26764,},
		  {1.47434,1.40272,1.3459,1.34294,1.35486,1.35786,1.37637,1.37809,1.36626,1.37799,},
		  {1.35338,1.29371,1.26893,1.28301,1.32253,1.36683,1.42095,1.45876,1.46619,1.47596,},
		  {0.981914,0.963971,0.958673,0.998597,1.0558,1.13805,1.24381,1.37329,1.51102,1.54593,}
		},
		{ {1.07241,1.01418,0.961703,0.939253,0.923126,0.909989,0.906139,0.909764,0.906582,0.918787,},
		  {1.34744,1.23761,1.14226,1.11125,1.09019,1.07815,1.07668,1.08168,1.08066,1.09143,},
		  {1.27879,1.16091,1.07965,1.04557,1.02213,1.00806,1.00076,0.988991,0.975826,0.972461,},
		  {1.27378,1.18279,1.10859,1.08898,1.07369,1.07185,1.06382,1.05746,1.03826,1.02971,},
		  {1.21301,1.12876,1.07431,1.07928,1.0923,1.10913,1.13394,1.15517,1.14601,1.13125,},
		  {0.928601,0.881405,0.858106,0.884577,0.932577,0.98757,1.06766,1.17815,1.29454,1.32396,}
		},
		{ {1.13408,1.09292,1.03903,1.01736,1.00742,0.99885,0.996984,0.996201,1.00095,1.02604,},
		  {1.29794,1.20539,1.11352,1.08317,1.06241,1.05776,1.05768,1.05962,1.07064,1.09344,},
		  {1.32565,1.23742,1.1539,1.12856,1.12261,1.12249,1.12209,1.12524,1.13157,1.15096,},
		  {1.30026,1.21436,1.14928,1.13779,1.13929,1.14386,1.15748,1.16718,1.17223,1.19118,},
		  {1.17931,1.12483,1.06686,1.07402,1.09524,1.12711,1.16468,1.19682,1.21344,1.22763,},
		  {0.863288,0.834453,0.816964,0.841447,0.883886,0.9444,1.0202,1.12086,1.23993,1.27941,}
		},
		{ {1.32089,1.31105,1.27868,1.27235,1.26873,1.26187,1.26802,1.28521,1.30572,1.34255,},
		  {1.32436,1.25726,1.17946,1.14947,1.13493,1.13061,1.12923,1.14739,1.17073,1.198,},
		  {1.21871,1.15169,1.08048,1.06177,1.04958,1.04538,1.04932,1.0639,1.08161,1.10114,},
		  {1.14445,1.094,1.03404,1.02758,1.02803,1.03457,1.046,1.06531,1.07948,1.09662,},
		  {1.02698,0.990069,0.948299,0.950174,0.963599,0.991677,1.02221,1.06282,1.08715,1.1027,},
		  {0.741233,0.730582,0.717963,0.739036,0.76781,0.81664,0.885315,0.981088,1.09332,1.13277,}
		},
		{ {1.32089,1.31105,1.27868,1.27235,1.26873,1.26187,1.26802,1.28521,1.30572,1.34255,},
		  {1.41292,1.30269,1.21023,1.14708,1.1551,1.14449,1.16742,1.17256,1.20454,1.23598,},
		  {1.23468,1.17977,1.0877,1.0426,1.03755,1.03673,1.04141,1.0602,1.08008,1.11222,},
		  {1.12799,1.05715,0.977035,0.962051,0.959246,0.961364,0.983199,1.00044,1.03006,1.05274,},
		  {0.943994,0.886869,0.838081,0.834327,0.841607,0.8676,0.904883,0.940145,0.982602,0.998271,},
		  {0.641899,0.618231,0.588003,0.603817,0.625871,0.666464,0.728355,0.817017,0.923004,0.968137,}
		},
		{ {1.32089,1.31105,1.27868,1.27235,1.26873,1.26187,1.26802,1.28521,1.30572,1.34255,},
		  {1.41292,1.30269,1.21023,1.14708,1.1551,1.14449,1.16742,1.17256,1.20454,1.23598,},
		  {1.23468,1.17977,1.0877,1.0426,1.03755,1.03673,1.04141,1.0602,1.08008,1.11222,},
		  {1.12799,1.05715,0.977035,0.962051,0.959246,0.961364,0.983199,1.00044,1.03006,1.05274,},
		  {0.943994,0.886869,0.838081,0.834327,0.841607,0.8676,0.904883,0.940145,0.982602,0.998271,},
		  {0.641899,0.618231,0.588003,0.603817,0.625871,0.666464,0.728355,0.817017,0.923004,0.968137,}
		}
	};

	// DUNE SP parameters crowns model [Arapuca/supercell front window only] [reflections included] [very preliminary]
	// without reflections
	const double VIS_RS60cm_SP_Crowns[8][9] = { {1.43777,1.35615,1.19995,0.953721,0.698022,0.431881,0.260141,0.260141,0.260141},
	{-0.024946,-0.023265,-0.0202072,-0.014,-0.0078772,-0.00306624,-0.00250285,-0.00250285,-0.00250285},
	{0.000453392,0.000421321,0.000364435,0.000240214,0.000115765,2.77616e-05,4.79453e-05,4.79453e-05,4.79453e-05},
	{-4.58354e-06,-4.25703e-06,-3.63112e-06,-2.26616e-06,-8.97243e-07,-4.60743e-09,-4.75304e-07,-4.75304e-07,-4.75304e-07},
	{2.6668e-08,2.48846e-08,2.09246e-08,1.24468e-08,4.04586e-09,-1.16309e-09,2.78743e-09,2.78743e-09,2.78743e-09},
	{-8.85713e-11,-8.33315e-11,-6.92914e-11,-3.9551e-11,-1.08039e-11,6.54496e-12,-9.56855e-12,-9.56855e-12,-9.56855e-12},
	{1.56469e-13,1.48697e-13,1.22833e-13,6.78826e-14,1.66391e-14,-1.4078e-14,1.7907e-14,1.7907e-14,1.7907e-14},
	{-1.14464e-16,-1.09914e-16,-9.06598e-17,-4.91087e-17,-1.20243e-17,1.04831e-17,-1.41827e-17,-1.41827e-17,-1.41827e-17} };

	// DUNE SP crowns border correction [Supercells, front window] [very preliminary]
	const std::vector<std::vector<std::vector<double>>> VIS_RS60_SP_Crowns_Borders = {					// [9][6][10]
		{ {1.2736,1.19322,1.15167,1.12932,1.10761,1.09935,1.08743,1.07796,1.07366,1.0858},
		  {1.45245,1.31446,1.23456,1.18967,1.16795,1.15307,1.13912,1.13733,1.13948,1.15851},
		  {1.63178,1.48075,1.40065,1.37056,1.35214,1.35007,1.33186,1.33427,1.32786,1.39484},
		  {1.70115,1.55714,1.49823,1.48386,1.48085,1.49963,1.49752,1.52025,1.53225,1.59},
		  {1.80851,1.67015,1.61555,1.63313,1.67233,1.72254,1.76865,1.84714,1.92123,1.9348},
		  {1.46561,1.35924,1.34527,1.37853,1.44829,1.54711,1.65477,1.81544,2.02184,2.14476}
		},
		{
		  {1.23483,1.16171,1.1241,1.10151,1.07746,1.06796,1.05964,1.05268,1.04352,1.05578},
		  {1.4096,1.27209,1.1987,1.16279,1.13826,1.12705,1.11716,1.11447,1.10972,1.13217},
		  {1.67457,1.51706,1.44609,1.41441,1.38841,1.39095,1.377,1.37807,1.37305,1.4404},
		  {1.86118,1.69609,1.62649,1.60568,1.61689,1.62458,1.63872,1.66462,1.68559,1.75928},
		  {1.63659,1.5043,1.46768,1.46866,1.49792,1.54462,1.59932,1.671,1.74906,1.79285},
		  {1.09831,1.01759,1.00917,1.03488,1.09065,1.1754,1.26909,1.41249,1.63508,1.88564}
		},
		{
		  {1.20386,1.1054,1.0736,1.04684,1.0283,1.01236,1.0035,0.997642,0.994963,0.999459},
		  {1.40157,1.23344,1.16679,1.12977,1.10682,1.08869,1.07693,1.06872,1.0784,1.09358},
		  {1.88844,1.68654,1.61284,1.57587,1.56044,1.56101,1.54823,1.56529,1.57537,1.68398},
		  {1.55515,1.38198,1.31853,1.30683,1.30039,1.3131,1.31825,1.34699,1.38091,1.47177},
		  {1.23772,1.13521,1.11137,1.10412,1.13134,1.16869,1.20231,1.26089,1.35023,1.44898},
		  {0.971885,0.889138,0.887993,0.911521,0.954105,1.02087,1.10668,1.2425,1.46736,1.78268}
		},
		{
		  {1.11795,1.04828,1.00425,0.980786,0.962056,0.951854,0.948097,0.936743,0.937975,0.942238},
		  {1.30568,1.1733,1.09332,1.05872,1.03606,1.02187,1.01926,1.00942,1.02577,1.05044},
		  {1.54404,1.39539,1.31125,1.28446,1.27249,1.27026,1.27294,1.2832,1.31219,1.43807},
		  {1.53479,1.39975,1.32735,1.31516,1.3216,1.33428,1.35587,1.386,1.44057,1.5836},
		  {1.41405,1.30046,1.25137,1.25363,1.2869,1.32321,1.37939,1.44922,1.56008,1.69126},
		  {1.0395,0.97405,0.955211,0.978332,1.0227,1.08836,1.18224,1.31127,1.54729,1.83347}
		},
		{
		  {1.09643,1.00855,0.963715,0.948626,0.926644,0.915792,0.915399,0.903818,0.909421,0.921402},
		  {1.39459,1.24164,1.15279,1.12496,1.10257,1.08672,1.08811,1.08717,1.10232,1.13484},
		  {1.11293,0.993811,0.931601,0.917236,0.907513,0.913883,0.918391,0.919903,0.978976,1.02368},
		  {1.07655,0.969624,0.91952,0.914297,0.915264,0.929581,0.944416,0.962235,1.0418,1.13494},
		  {0.99166,0.900013,0.859152,0.870518,0.889041,0.915137,0.954786,1.00732,1.14112,1.28817},
		  {0.756194,0.69543,0.678343,0.699389,0.735125,0.7827,0.849821,0.948971,1.2003,1.5542}
		},
		{
		  {1.18579,1.09524,1.04753,1.02918,1.00524,0.997954,1.00512,0.994378,1.01034,1.03357},
		  {1.35357,1.20641,1.11858,1.08995,1.06291,1.05542,1.06435,1.06237,1.09278,1.12093},
		  {1.28992,1.15523,1.07693,1.06472,1.05866,1.07191,1.08504,1.11016,1.2018,1.29795},
		  {1.22995,1.10328,1.03943,1.0358,1.04288,1.06394,1.09022,1.13707,1.26123,1.39058},
		  {1.07967,0.981448,0.933478,0.943098,0.96357,1.00138,1.05091,1.12736,1.31556,1.47603},
		  {0.766993,0.709059,0.687298,0.709376,0.740827,0.792668,0.860598,0.971969,1.26938,1.59273}
		},
		{
		  {1.49613,1.38285,1.32156,1.29096,1.27475,1.27323,1.28614,1.28765,1.32294,1.36366},
		  {1.35704,1.21441,1.11588,1.07816,1.066,1.07461,1.07879,1.09744,1.11328,1.08819},
		  {1.13554,1.00994,0.929245,0.916073,0.926651,0.943959,0.950379,1.00152,1.0764,1.05084},
		  {1.03358,0.923006,0.855335,0.853259,0.87708,0.898431,0.916185,0.987892,1.09047,1.08535},
		  {0.885312,0.797102,0.749068,0.754515,0.789434,0.818245,0.85402,0.956085,1.11356,1.16188},
		  {0.614056,0.563353,0.542251,0.558323,0.594492,0.63264,0.680464,0.806678,1.04624,1.23013}
		},
		{
		  {1.49613,1.38285,1.32156,1.29096,1.27475,1.27323,1.28614,1.28765,1.32294,1.36366},
		  {1.4677,1.28264,1.17039,1.12156,1.09715,1.09127,1.10953,1.12872,1.10591,1.04389},
		  {1.1692,1.02864,0.937441,0.912596,0.922308,0.934488,0.953343,0.997647,1.04989,0.99568},
		  {1.0203,0.888417,0.818925,0.808982,0.822052,0.837663,0.871719,0.927524,1.00587,0.969644},
		  {0.819931,0.729236,0.673757,0.672855,0.697098,0.722918,0.767695,0.84489,0.965474,0.987271},
		  {0.54002,0.491351,0.462125,0.472528,0.49657,0.527869,0.577514,0.673846,0.840828,0.975585}
		},
		{
		  {1.49613,1.38285,1.32156,1.29096,1.27475,1.27323,1.28614,1.28765,1.32294,1.36366},
		  {1.4677,1.28264,1.17039,1.12156,1.09715,1.09127,1.10953,1.12872,1.10591,1.04389},
		  {1.1692,1.02864,0.937441,0.912596,0.922308,0.934488,0.953343,0.997647,1.04989,0.99568},
		  {1.0203,0.888417,0.818925,0.808982,0.822052,0.837663,0.871719,0.927524,1.00587,0.969644},
		  {0.819931,0.729236,0.673757,0.672855,0.697098,0.722918,0.767695,0.84489,0.965474,0.987271},
		  {0.54002,0.491351,0.462125,0.472528,0.49657,0.527869,0.577514,0.673846,0.840828,0.975585}
		}
	};


public:	
	// constructor 
	semi_analytic_hits();

	// destructor
	~semi_analytic_hits(){};

	// hits calculating functions
	int VUVHits(const int &Nphotons_created, const TVector3 &ScintPoint, const TVector3 &OpDetPoint, const int &optical_detector_type);
	int VisHits(const int &Nphotons_created, const TVector3 &ScintPoint, const TVector3 &OpDetPoint, const int &optical_detector_type);

	// concentric crowns based model of hits, preliminary
	int VisHits_crowns(const int &Nphotons_created, const TVector3 &ScintPoint, const TVector3 &OpDetPoint, const int &optical_detector_type);

	// gaisser-hillas function
	static Double_t GaisserHillas(double *x, double *par);

	// solid angle of rectangular aperture calculation functions
	double omega(const double &a, const double &b, const double &d) const;
	double solid(const acc& out, const TVector3 &v) const;

	// solid angle of circular aperture calculation functions
	double Disk_SolidAngle(double *x, double *p);
	double Disk_SolidAngle(double d, double h, double b);

	// linear interpolation function
	double interpolate( const std::vector<double> &xData, const std::vector<double> &yData, double x, bool extrapolate );

};

#endif