#ifndef SOLID_ANGLE_H
#define SOLID_ANGLE_H

// class containing functions for calculating number of hits on each optical channel via the solid angle method
// calculates number of VUV hits, using gaisser-hillas corrections for Rayleigh scattering

// calculates number of visible hits via calculating number of hits on the cathode corrected with gaisser-hillas curves then the number
// of hits from the cathode for each optical channel using correction analogous to gaisser-hillas curves

#include <vector>
#include <string>

#include "TF1.h"
#include "TVector3.h"

class semi_analytic_hits {

private:

	// useful constants
	const double pi = 3.141592653589793;

	// detector type flag
	//const std::string flagDetector;

	// *************************************************************************************************
	//                    	OPTICAL DETECTOR SHAPE/SIZE
	// *************************************************************************************************	
	// Supercells: type = 1;
	double y_dimension_detector = 9.3;	// cm	// WHAT ARE THE SIZE IN SBND?
	double z_dimension_detector = 9.3;	// cm
	// Flat PMTs: type = 0; 
	double radius = 8*2.54/2.;	//	8" PMT diameter  // cm
	// Dome PMTs: type = 2

	// structure definition for solid angle of rectangle function
	struct acc{
		// ax,ay,az = centre of rectangle; w = y dimension; h = z dimension
  		double ax, ay, az, w, h; 
	};

	bool _mathmore_loaded_ = false;


	// *************************************************************************************************
	//                    NUMBER OF VUV HITS PARAMETRIZATION
	// *************************************************************************************************
	// VUV hits Gaisser-Hillas Rayleigh scattering correction
	double fGHVUVPars[4][9];
	double fVUVBorderCorr[2];
	
	// SBND Gaisser-Hillas, RS = 99.9 cm
	// flat surface GH
	const double fGHVUVPars_flat[4][9] = { {1.19504, 1.15813, 1.11002, 1.03539, 0.936441, 0.817797, 0.683498, 0.538478, 0.420554},
  									  {83.6781, 85.6706, 89.3935, 90.3666, 96.9142, 113.058, 117.432, 146.766, 111.584},
  									  {36.5991, 37.4623, 35.4112, 38.2046, 40.0188, 40.0661, 50.8989, 47.3339, 58.8727},
  									  {-500, -500, -500, -500, -500, -500, -500, -500, -500} };
	// flat surface border correction
  	const std::vector<double> angulo_flat = {5, 15, 25, 35, 45, 55, 65, 75, 85};
	const std::vector<double> slopes1_flat = {-0.000149087, -0.000145823, -0.000146892, -0.000187688, -0.000166891, -0.000219328, -0.000161991, -0.000187722, -9.73022e-05};
	const std::vector<double> slopes2_flat = {-0.0644363, -0.0554658, -0.0533842, -0.0667856, -0.0677265, -0.0570175, -0.0859161, -0.0712139, -0.120227};
	const std::vector<double> slopes3_flat = {-0.0216692, -0.0153594, -0.00926002, 0.00711452, 0.00870613, 0.0124096, 0.0205596, 0.0524565, 0.0831498};

	// dome GH
	const double fGHVUVPars_dome[4][9] = { {1.47137, 1.39568, 1.33419, 1.19735, 1.02624, 0.804025, 0.566817, 0.308081, 0.098954},
										 {97.8821, 98.5996, 105.453, 99.7989, 104.635, 113.284, 138.469, 135.186, 68.4109},
										 {56.1188, 58.5541, 52.1323, 63.2726, 67.4074, 76.4839, 86.2676, 232.503, 100.24},
										 {-150, -150, -150, -150, -150, -150, -150, -150, -150} };
	// dome border corrections
    const std::vector<double> angulo_dome = {5, 15, 25, 35, 45, 55, 65, 75, 85};
	const std::vector<double> slopes1_dome = {-0.000258822, -0.000150673, -0.000150758, -0.000130018, -0.000105008, -5.20818e-05, 2.82208e-06, 6.7663e-05, 4.55751e-05};
	const std::vector<double> slopes2_dome = {-0.0526475, -0.0440946, -0.0461537, -0.0456666, -0.0467275, -0.0738711, -0.102477, -0.205481, -0.0786016}; 
	const std::vector<double> slopes3_dome = {-0.00528649, -0.016028, -0.000189162, 0.000639908, 0.00300766, 0.00207049, -0.0266279, -0.439779, 0.0588841}; 


	// bin size of the offset angle used in the parametrization in degrees
	const double delta_angulo = 10.;
	// LAr absorption length in cm
	const double L_abs = 2000.;


	// *************************************************************************************************
	//                    NUMBER OF VIS HITS PARAMETRIZATION
	// *************************************************************************************************
	// Detector properties: 
	
	// plane depth
	// SBND
	const double plane_depth = 0;	// cm 
	
	// Cathode plane covered by foils
	// SBND
	// size
	const double y_dimension_foils = 400; // cm
	const double z_dimension_foils = 500; // cm
	
	// centre coordinates
	// SBND
	const double x_foils = 0; const double y_foils = 0; const double z_foils = 250;	// cm

	// Visible hits correction
	// SBND RS99cm
	// Flat surface
	const std::vector<double> vDistances_x_flat = {10, 30, 50, 70, 90, 110, 130, 150, 170, 190, 195};			// cm	[11]
	const std::vector<double> vDistances_r_flat = {10, 60.4619, 136.421, 186.119, 234.324, 280.4, 299.1};		// cm	[7]

	const std::vector<std::vector<std::vector<double>>> fVISPars_flat = { 
	{ {1.29341, 1.06689, 0.917514, 0.815145, 0.753364, 0.702065, 0.666918, 0.644465, 0.621166, 0.595002, 0.588316},
	  {1.31296, 1.08502, 0.937976, 0.841677, 0.772627, 0.725873, 0.691891, 0.672458, 0.651384, 0.623332, 0.618748},
	  {1.43405, 1.20473, 1.05372, 0.947644, 0.873164, 0.819357, 0.782934, 0.75594, 0.728914, 0.703558, 0.695423},
	  {1.59301, 1.36987, 1.19281, 1.06331, 0.966613, 0.896812, 0.845181, 0.803511, 0.774326, 0.740068, 0.7286},
	  {1.78278, 1.56682, 1.3711, 1.21558, 1.09602, 1.01029, 0.9482, 0.896445, 0.854848, 0.817491, 0.803319},
	  {2.25679, 2.05199, 1.77843, 1.53501, 1.33505, 1.19041, 1.07851, 0.990501, 0.929601, 0.872777, 0.859695},
	  {2.46366, 2.29233, 1.92881, 1.61222, 1.38884, 1.20583, 1.07518, 1.0032, 0.922995, 0.870282, 0.85447}
	},
	{ {1.26185, 1.05699, 0.919836, 0.82496, 0.759135, 0.716973, 0.684797, 0.662843, 0.639668, 0.615167, 0.604396},
	  {1.29166, 1.07927, 0.940517, 0.847525, 0.785951, 0.74171, 0.710172, 0.690287, 0.674349, 0.647164, 0.635898},
	  {1.40541, 1.19361, 1.05497, 0.955724, 0.886237, 0.836534, 0.80311, 0.772294, 0.749522, 0.722264, 0.710622},
	  {1.54293, 1.33626, 1.18082, 1.0663, 0.984753, 0.921948, 0.877609, 0.842915, 0.813647, 0.783677, 0.770201},
	  {1.71983, 1.5348, 1.36362, 1.22346, 1.11845, 1.03964, 0.975172, 0.931689, 0.894116, 0.851895, 0.837597},
	  {1.97572, 1.8517, 1.64545, 1.44385, 1.29247, 1.17045, 1.08171, 1.00954, 0.962294, 0.916043, 0.893014},
	  {2.124, 2.08021, 1.82302, 1.56518, 1.37235, 1.24251, 1.13266, 1.03669, 0.990119, 0.933394, 0.947035}
	},
	{ {1.21386, 1.04246, 0.922076, 0.843702, 0.785706, 0.7451, 0.721179, 0.699071, 0.682837, 0.659844, 0.643677},
	  {1.24777, 1.06882, 0.9486, 0.86897, 0.812549, 0.77522, 0.749193, 0.730754, 0.714888, 0.689542, 0.680021},
	  {1.33396, 1.16049, 1.0439, 0.963931, 0.906936, 0.865632, 0.838478, 0.817183, 0.799853, 0.777907, 0.766699},
	  {1.45335, 1.29304, 1.16917, 1.07182, 1.00087, 0.949423, 0.911154, 0.882191, 0.858197, 0.829756, 0.815373},
	  {1.59895, 1.4705, 1.33064, 1.21224, 1.12157, 1.05265, 1.00036, 0.965166, 0.936406, 0.903511, 0.896755},
	  {1.84783, 1.78559, 1.62281, 1.46062, 1.32436, 1.21775, 1.13392, 1.07288, 1.02545, 0.987848, 0.96399},
	  {2.15177, 2.10504, 1.82927, 1.58502, 1.40705, 1.242, 1.1487, 1.0641, 1.00004, 0.957495, 0.950732}
	},
	{ {1.1727, 1.03578, 0.940702, 0.873906, 0.827511, 0.797897, 0.775774, 0.761414, 0.749438, 0.72382, 0.711179},
	  {1.2132, 1.06484, 0.966703, 0.901601, 0.855773, 0.825201, 0.808204, 0.79367, 0.782621, 0.758138, 0.746555},
	  {1.25039, 1.11687, 1.03042, 0.970275, 0.930286, 0.903234, 0.885374, 0.873358, 0.863847, 0.843897, 0.833992},
	  {1.31485, 1.21002, 1.12804, 1.06291, 1.01489, 0.979885, 0.957625, 0.941524, 0.926478, 0.908791, 0.894145},
	  {1.43499, 1.36914, 1.27599, 1.19562, 1.13189, 1.08483, 1.05269, 1.02897, 1.01285, 0.9901, 0.979448},
	  {1.59552, 1.60331, 1.5141, 1.4107, 1.31642, 1.23953, 1.18134, 1.13969, 1.11084, 1.07396, 1.0626},
	  {1.79348, 1.87074, 1.70682, 1.54105, 1.4167, 1.29971, 1.22392, 1.15606, 1.13197, 1.10927, 1.08277}
	},
	{ {1.15202, 1.04494, 0.97332, 0.919725, 0.890852, 0.869741, 0.858668, 0.853368, 0.844606, 0.824155, 0.81142},
	  {1.15499, 1.04465, 0.974062, 0.928791, 0.899677, 0.883993, 0.874839, 0.873, 0.869601, 0.853134, 0.843116},
	  {1.13576, 1.05186, 1.00015, 0.968852, 0.948286, 0.939056, 0.938627, 0.939464, 0.942101, 0.93046, 0.920415},
	  {1.1822, 1.12938, 1.08292, 1.04746, 1.02311, 1.00959, 1.00423, 1.00404, 1.00415, 0.994619, 0.982961},
	  {1.25265, 1.23815, 1.19676, 1.15935, 1.13046, 1.11252, 1.10558, 1.10391, 1.10331, 1.09726, 1.0894},
	  {1.35865, 1.41995, 1.38585, 1.33898, 1.29103, 1.2456, 1.22157, 1.20555, 1.19286, 1.18111, 1.16382},
	  {1.49942, 1.62699, 1.55145, 1.45453, 1.3655, 1.30066, 1.25959, 1.22223, 1.20069, 1.19475, 1.19202}
	},
	{ {1.22454, 1.12676, 1.05752, 1.01766, 0.993549, 0.976985, 0.967248, 0.970452, 0.967913, 0.945087, 0.937532},
	  {1.11336, 1.02869, 0.976547, 0.94902, 0.935041, 0.931572, 0.937711, 0.946622, 0.956564, 0.947466, 0.935481},
	  {1.05085, 0.994929, 0.968169, 0.958327, 0.960132, 0.970809, 0.99016, 1.01019, 1.02706, 1.03047, 1.02387},
	  {1.06564, 1.04399, 1.02524, 1.01623, 1.01677, 1.02371, 1.04, 1.06211, 1.0812, 1.08682, 1.08115},
	  {1.1062, 1.11927, 1.10719, 1.09901, 1.0981, 1.10266, 1.11982, 1.1389, 1.16453, 1.17172, 1.16851},
	  {1.16715, 1.24818, 1.25329, 1.23966, 1.22603, 1.2182, 1.2223, 1.23606, 1.24656, 1.25359, 1.24914},
	  {1.26056, 1.41104, 1.3769, 1.33283, 1.28912, 1.26094, 1.25143, 1.24354, 1.25471, 1.27858, 1.28191}
	},
	{ {1.22454, 1.12676, 1.05752, 1.01766, 0.993549, 0.976985, 0.967248, 0.970452, 0.967913, 0.945087, 0.937532},
	  {1.11336, 1.02869, 0.976547, 0.94902, 0.935041, 0.931572, 0.937711, 0.946622, 0.956564, 0.947466, 0.935481},
	  {1.0788, 1.02398, 1.0005, 0.997336, 1.00241, 1.02527, 1.05482, 1.08624, 1.10587, 1.12084, 1.10934},
	  {1.05183, 1.03192, 1.01945, 1.01935, 1.02909, 1.05124, 1.0776, 1.11282, 1.14536, 1.1616, 1.15326},
	  {1.04848, 1.06353, 1.05832, 1.05676, 1.07002, 1.08549, 1.11282, 1.15114, 1.18238, 1.21159, 1.20885},
	  {1.0723, 1.14584, 1.16101, 1.15326, 1.15396, 1.1605, 1.1807, 1.20181, 1.24273, 1.26176, 1.26905},
	  {1.14896, 1.27505, 1.25874, 1.21844, 1.19258, 1.18584, 1.19203, 1.21234, 1.23643, 1.28044, 1.29723}
	},
	{ {1.22454, 1.12676, 1.05752, 1.01766, 0.993549, 0.976985, 0.967248, 0.970452, 0.967913, 0.945087, 0.937532},
	  {1.11336, 1.02869, 0.976547, 0.94902, 0.935041, 0.931572, 0.937711, 0.946622, 0.956564, 0.947466, 0.935481},
	  {1.0788, 1.02398, 1.0005, 0.997336, 1.00241, 1.02527, 1.05482, 1.08624, 1.10587, 1.12084, 1.10934},
	  {1.05183, 1.03192, 1.01945, 1.01935, 1.02909, 1.05124, 1.0776, 1.11282, 1.14536, 1.1616, 1.15326},
	  {1.04848, 1.06353, 1.05832, 1.05676, 1.07002, 1.08549, 1.11282, 1.15114, 1.18238, 1.21159, 1.20885},
	  {1.0723, 1.14584, 1.16101, 1.15326, 1.15396, 1.1605, 1.1807, 1.20181, 1.24273, 1.26176, 1.26905},
	  {1.27474, 1.44297, 1.3349, 1.24249, 1.27868, 1.31034, 1.26115, 1.29498, 1.35899, 1.32796, 1.39645}
	},
	{ {1.22454, 1.12676, 1.05752, 1.01766, 0.993549, 0.976985, 0.967248, 0.970452, 0.967913, 0.945087, 0.937532},
	  {1.11336, 1.02869, 0.976547, 0.94902, 0.935041, 0.931572, 0.937711, 0.946622, 0.956564, 0.947466, 0.935481},
	  {1.0788, 1.02398, 1.0005, 0.997336, 1.00241, 1.02527, 1.05482, 1.08624, 1.10587, 1.12084, 1.10934},
	  {1.05183, 1.03192, 1.01945, 1.01935, 1.02909, 1.05124, 1.0776, 1.11282, 1.14536, 1.1616, 1.15326},
	  {1.04848, 1.06353, 1.05832, 1.05676, 1.07002, 1.08549, 1.11282, 1.15114, 1.18238, 1.21159, 1.20885},
	  {1.0723, 1.14584, 1.16101, 1.15326, 1.15396, 1.1605, 1.1807, 1.20181, 1.24273, 1.26176, 1.26905},
	  {1.27474, 1.44297, 1.3349, 1.24249, 1.27868, 1.31034, 1.26115, 1.29498, 1.35899, 1.32796, 1.39645}
	}	
	};

	// Dome surface
	const std::vector<double> vDistances_x_dome = {10, 30, 50, 70, 90, 110, 130, 150, 170, 190, 195, 199};   // cm	[12]
	const std::vector<double> vDistances_r_dome = {61.2, 138.5, 186.9, 233.2, 278.8};		// cm	[5]

	const std::vector<std::vector<std::vector<double>>> fVISPars_dome = { 
	{ {1.8763, 1.52373, 1.3242, 1.19976, 1.1151, 1.05578, 1.00907, 0.982144, 0.937224, 0.865445, 0.839462, 0.79318},
	  {1.93968, 1.67467, 1.48614, 1.35155, 1.25265, 1.18543, 1.13355, 1.092, 1.05169, 0.995562, 0.975762, 0.955078},
	  {2.2355, 1.91302, 1.67642, 1.51114, 1.38772, 1.30335, 1.22847, 1.17965, 1.12251, 1.05193, 1.01545, 0.985131},
	  {2.44016, 2.17117, 1.92324, 1.73196, 1.58602, 1.47247, 1.3801, 1.30958, 1.24798, 1.16101, 1.13561, 1.10305},
	  {3.14347, 2.78681, 2.40504, 2.09776, 1.8262, 1.65162, 1.50293, 1.39996, 1.3093, 1.18397, 1.17889, 1.12609}
	},
	{ {1.80745, 1.48535, 1.3008, 1.1898, 1.1061, 1.0493, 1.01484, 0.976277, 0.944248, 0.882041, 0.845325, 0.803434},
	  {1.91318, 1.65796, 1.47698, 1.35147, 1.25976, 1.19285, 1.1433, 1.10679, 1.05892, 0.993415, 0.97606, 0.94869},
	  {2.08913, 1.84576, 1.64763, 1.50504, 1.39226, 1.31155, 1.25001, 1.19946, 1.14859, 1.08283, 1.0575, 1.0335},
	  {2.34601, 2.09526, 1.8806, 1.71392, 1.57715, 1.47382, 1.3906, 1.32411, 1.26456, 1.17708, 1.1429, 1.10686},
	  {2.79837, 2.53838, 2.24301, 1.97426, 1.76432, 1.60871, 1.48067, 1.38432, 1.30774, 1.20871, 1.1756, 1.15198}
	},
	{ {1.77248, 1.48424, 1.31618, 1.20816, 1.13979, 1.08681, 1.05965, 1.02808, 0.994862, 0.921168, 0.892417, 0.843765},
	  {1.83835, 1.63711, 1.48044, 1.36951, 1.29096, 1.234, 1.19044, 1.15832, 1.1188, 1.06318, 1.04285, 1.01846},
	  {2.02176, 1.8108, 1.63644, 1.50929, 1.41091, 1.33912, 1.28675, 1.24143, 1.19999, 1.12673, 1.10533, 1.0717},
	  {2.14757, 1.9664, 1.79718, 1.66008, 1.55188, 1.4671, 1.40252, 1.34688, 1.29602, 1.219, 1.19166, 1.15076},
	  {2.59044, 2.41116, 2.17231, 1.95319, 1.77225, 1.63334, 1.52876, 1.44672, 1.37776, 1.28448, 1.24216, 1.20147}
	},
	{ {1.69775, 1.44526, 1.29862, 1.20978, 1.1489, 1.10433, 1.08007, 1.05234, 1.01887, 0.955227, 0.92068, 0.874745},
	  {1.68841, 1.52384, 1.40315, 1.31799, 1.25804, 1.21605, 1.18363, 1.16103, 1.12936, 1.07502, 1.05167, 1.02826},
	  {1.81104, 1.64695, 1.51421, 1.4171, 1.34749, 1.29791, 1.2612, 1.22904, 1.19453, 1.1359, 1.11008, 1.07742},
	  {1.87606, 1.76023, 1.64998, 1.55816, 1.48252, 1.42679, 1.38541, 1.34829, 1.31035, 1.24114, 1.21324, 1.17937},
	  {2.1958, 2.09713, 1.95069, 1.79933, 1.66706, 1.56632, 1.49174, 1.42973, 1.37534, 1.29159, 1.25829, 1.22535}
	},
	{ {1.5648, 1.35949, 1.25196, 1.18347, 1.14639, 1.11847, 1.10388, 1.08959, 1.07376, 1.0065, 0.972823, 0.926972},
	  {1.46672, 1.35521, 1.27626, 1.22487, 1.19383, 1.17346, 1.16221, 1.15325, 1.13735, 1.08996, 1.07493, 1.05066},
	  {1.54505, 1.44907, 1.36379, 1.31018, 1.27189, 1.24588, 1.23105, 1.21974, 1.20072, 1.15323, 1.13002, 1.09795},
	  {1.5994, 1.53857, 1.47581, 1.42281, 1.38406, 1.35484, 1.33593, 1.32112, 1.30291, 1.2447, 1.2173, 1.18612},
	  {1.90737, 1.87168, 1.77188, 1.67611, 1.58554, 1.52335, 1.46293, 1.43504, 1.40166, 1.33204, 1.29907, 1.25828}
	},
	{ {1.5241, 1.33631, 1.24821, 1.19466, 1.16756, 1.15967, 1.15183, 1.1454, 1.13249, 1.07067, 1.03428, 0.98441},
	  {1.31055, 1.22337, 1.17281, 1.14424, 1.13092, 1.13168, 1.1358, 1.14018, 1.13582, 1.09974, 1.08056, 1.0597},
	  {1.31779, 1.25705, 1.20763, 1.18268, 1.16782, 1.1641, 1.16677, 1.17098, 1.16924, 1.13356, 1.11169, 1.08408},
	  {1.34233, 1.31486, 1.28581, 1.26407, 1.25103, 1.24717, 1.24907, 1.25334, 1.25111, 1.21344, 1.19085, 1.15777},
	  {1.48501, 1.48441, 1.44596, 1.3993, 1.36101, 1.32453, 1.31428, 1.30644, 1.29399, 1.25435, 1.22196, 1.19599}
	},
	{ {1.5241, 1.33631, 1.24821, 1.19466, 1.16756, 1.15967, 1.15183, 1.1454, 1.13249, 1.07067, 1.03428, 0.98441},
	  {1.34662, 1.27868, 1.23111, 1.21245, 1.20235, 1.20926, 1.22302, 1.24028, 1.23331, 1.19001, 1.18624, 1.15856},
	  {1.32141, 1.25591, 1.207, 1.195, 1.18634, 1.19783, 1.20765, 1.2252, 1.22652, 1.19729, 1.17014, 1.13967},
	  {1.22616, 1.2038, 1.1849, 1.17186, 1.17342, 1.18063, 1.19334, 1.20904, 1.21127, 1.18663, 1.16648, 1.13347},
	  {1.31127, 1.31864, 1.28143, 1.24918, 1.22613, 1.20665, 1.20743, 1.20787, 1.21325, 1.1803, 1.15383, 1.13478}
	},
	{ {1.5241, 1.33631, 1.24821, 1.19466, 1.16756, 1.15967, 1.15183, 1.1454, 1.13249, 1.07067, 1.03428, 0.98441},
	  {1.34662, 1.27868, 1.23111, 1.21245, 1.20235, 1.20926, 1.22302, 1.24028, 1.23331, 1.19001, 1.18624, 1.15856},
	  {1.32141, 1.25591, 1.207, 1.195, 1.18634, 1.19783, 1.20765, 1.2252, 1.22652, 1.19729, 1.17014, 1.13967},
	  {1.22616, 1.2038, 1.1849, 1.17186, 1.17342, 1.18063, 1.19334, 1.20904, 1.21127, 1.18663, 1.16648, 1.13347},
	  {1.31127, 1.31864, 1.28143, 1.24918, 1.22613, 1.20665, 1.20743, 1.20787, 1.21325, 1.1803, 1.15383, 1.13478}
	},
	{ {1.5241, 1.33631, 1.24821, 1.19466, 1.16756, 1.15967, 1.15183, 1.1454, 1.13249, 1.07067, 1.03428, 0.98441},
	  {1.34662, 1.27868, 1.23111, 1.21245, 1.20235, 1.20926, 1.22302, 1.24028, 1.23331, 1.19001, 1.18624, 1.15856},
	  {1.32141, 1.25591, 1.207, 1.195, 1.18634, 1.19783, 1.20765, 1.2252, 1.22652, 1.19729, 1.17014, 1.13967},
	  {1.22616, 1.2038, 1.1849, 1.17186, 1.17342, 1.18063, 1.19334, 1.20904, 1.21127, 1.18663, 1.16648, 1.13347},
	  {1.31127, 1.31864, 1.28143, 1.24918, 1.22613, 1.20665, 1.20743, 1.20787, 1.21325, 1.1803, 1.15383, 1.13478}
	}	
	};
	

public:	
	// constructor 
	semi_analytic_hits();

	// destructor
	~semi_analytic_hits(){};

	// hits calculating functions
	int VUVHits(const int &Nphotons_created, const TVector3 &ScintPoint, const TVector3 &OpDetPoint, const int &optical_detector_type);
	int VisHits(const int &Nphotons_created, const TVector3 &ScintPoint, const TVector3 &OpDetPoint, const int &optical_detector_type);

	// gaisser-hillas function
	static Double_t GaisserHillas(double x, double *par);

	// solid angle of rectangular aperture calculation functions
	double omega(const double &a, const double &b, const double &d) const;
	double solid(const acc& out, const TVector3 &v) const;

	// solid angle of circular aperture calculation functions
	double Disk_SolidAngle(double *x, double *p);
	double Disk_SolidAngle(double d, double h, double b);

	// solid angle of dome (PMTs)
	double Omega_Dome_Model(const double distance, const double theta) const;

	// linear interpolation function
	double interpolate( const std::vector<double> &xData, const std::vector<double> &yData, double x, bool extrapolate );

};

#endif