#ifndef TIMEPARAM_H
#define TIMEPARAM_H

// class containing information required for VUV and visible timings parameterisation
/*
VUV:
   	landau + exponential parameterisation of VUV photon arrival times
	The initial sampling of generated parameterisations to allow drawing random numbers from the distribution is slow. To improve efficiency, the parameterisations
	are discretised in distance allowing each generated and sampled parameterisation to be stored in a vector so they to be used whenever subsequently required
	without the need for regenerating. With 1cm step sizes in the discretisation this method is of order 100 times faster than original method, and the discrepancy
	created is on sub-nanosecond scale. 

VIS:
	The shortest path for the reflected is calculated considering refractive indices of each component in LAr giving the earliest arrival time.
	The distribution of the arrival times is taken initially as the distribution of the VUV arrival times to the cathode plane, then these are smeared relative to
	the fastest arrival time with an exponential distribution. This leaves the fastest arrival time unchanged and approximates the overall distribution in the 
	visible light arrival times seen in full simulation. 
*/	

#include <vector>

#include "TF1.h"
#include "TVector3.h"

class time_parameterisation {

private:
	// *************************************************************************************************
	// Discretisation of VUV time parameterisations
	// *************************************************************************************************
	// discretisation step size in cm, set in libraryanalyze_light_histo.h
	const double step_size;
	// maximum distance in cm parameterisations are generated for (only generated when required to prevent long initial loading time)
	const double d_max = 2500;
	// vector containing generated VUV timing parameterisations
	std::vector<std::vector<TF1>> VUV_timing;
	// vector containing min and max range VUV timing parameterisations are sampled to
	std::vector<std::vector<double>> VUV_max;
	std::vector<std::vector<double>> VUV_min;
	
	// *************************************************************************************************
	// Definition of the parameters for VUV timings parameterisation: DUNE-SP, RS = 99.9cm, 45 degree bins
	// *************************************************************************************************
	// Parameters of the Landau + Exponential (<= 350 cm) and Landau (> 350 cm) models
	const int timing_vuv_angular_bins = 2;
	const double timing_vuv_angular_bin_size = 45.;
	// Landau parameters 
	const std::vector<double> vDistances_landau = {0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725};
	const std::vector<std::vector<double>> vMpv_landau = {
		{0, 1.77134, 3.85131, 5.593, 7.46645, 9.44108, 11.5899, 13.8189, 16.2753, 18.8619, 21.6428, 24.4828, 27.189, 29.6607, 32.3706, 35.2212, 41.4392, 43.2475, 45.939, 48.5748, 51.4841, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 1.91282, 4.31774, 5.90297, 8.90329, 11.8104, 12.9629, 17.0555, 19.5031, 24.7774, 27.175, 29.8128, 33.5619, 36.6553, 43.0021, 46.059, 52.6953, 55.1056, 59.9728, 65.2979, 67.9593, 71.0675, 74.7855, 79.689, 85.3232, 90.818, 97.0409, 103.2, 111.306, 117.6}
	};
	const std::vector<std::vector<double>> vWidth_landau = {
		{0, 0.10303, 0.313506, 0.525492, 0.716541, 0.969894, 1.29961, 1.73657, 2.30482, 2.94669, 3.71951, 4.53258, 5.24435, 5.79945, 6.53951, 7.34736, 12.0305, 12.4263, 13.4917, 14.7245, 16.6202, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0.281535, 0.633816, 0.80694, 1.46701, 2.32209, 2.20895, 3.56751, 4.23966, 6.11748, 6.97923, 7.82035, 9.05225, 10.1422, 12.6053, 13.6305, 17.7093, 18.3244, 19.9961, 22.1072, 23.4653, 25.3052, 27.5297, 30.5683, 34.8304, 39.7456, 45.1447, 51.3363, 58.4681, 63.0122}
	};
	const std::vector<std::vector<double>> vNorm_landau = {
		{0, 27.41, 2.57134, 1.47775, 0.96034, 0.668723, 0.487808, 0.362789, 0.277659, 0.224883, 0.185199, 0.159048, 0.143393, 0.134121, 0.125978, 0.115751, 0.0921523, 0.0907023, 0.0856498, 0.0814134, 0.0750844, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 3.79032, 1.25862, 0.928939, 0.566822, 0.319336, 0.331336, 0.219171, 0.178579, 0.135635, 0.119011, 0.109138, 0.0991792, 0.091753, 0.0787281, 0.0743768, 0.0663083, 0.0648284, 0.0608437, 0.0572599, 0.0561134, 0.0543579, 0.0529609, 0.0519021, 0.0510434, 0.0504866, 0.0503902, 0.0507405, 0.0503883, 0.0497511}
	};	
	// Exponential parameters
	const std::vector<double> vDistances_exp = {0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375};
	const std::vector<std::vector<double>> vSlope_exp = {
		{0, -0.205783, -0.157344, -0.124546, -0.0949427, -0.0640574, -0.0509928, -0.0421876, -0.0360771, -0.0327956, -0.02997, -0.0280924, -0.0269181, -0.0259104, -0.0248679, -0.0233511},
		{0, -0.157151, -0.10447, -0.0875509, -0.0605052, -0.0435416, -0.040128, -0.0325951, -0.0292046, -0.0255942, -0.0241776, -0.0226607, -0.0213594, -0.02037, -0.0181767, -0.0172752}
	};
	const std::vector<std::vector<double>> vNorm_exp = {
		{0, 0.00276789, 0.0362807, 0.081067, 0.111523, 0.106485, 0.123852, 0.144239, 0.168534, 0.201111, 0.234443, 0.269284, 0.300041, 0.320541, 0.342403, 0.356125},
		{0, 0.0242526, 0.086063, 0.101552, 0.134787, 0.171863, 0.152519, 0.203461, 0.224872, 0.279135, 0.304123, 0.317034, 0.341433, 0.360053, 0.382877, 0.391287}
	};

	// Distance from "Landau + Expo" -> "Single Landau" model
	const double inflexion_point_distance = 350.; //cm

	// VUV group velocity
	// Argon
	const double vuv_vgroup_mean = 13.5;	//cm/ns
	const double vuv_vgroup_max = 18.;		//cm/ns
	// Xenon -- Update with correct values
	const double vuv_vgroup_mean_Xe = 20.0;	//cm/ns
	const double vuv_vgroup_max_Xe = 20.0;	//cm/ns
	
	// *************************************************************************************************
	// Definition of the parameters for visible timings calculation, DUNE-SP, RS_vuv = 99.9cm, 10 degree bins
	// *************************************************************************************************
	// velocity of visible light
	const double vis_vmean = 23.99; 	// cm/ns
	const double vis_vrms = 0.07508; 	// cm/ns
	// x-position of cathode foils, matching position of foils in gdml file - this needs changing if using different geometry
	const double cathode_plane_depth = 363.38405;	// DUNE-SP 1x2x6
	
	// Smearing parameters:
	const int timing_vis_angular_bins = 9;
	const double timing_vis_angular_bin_size = 10.;
	
	const double z_foils = 696.294; 	// centre of foils in z (DUNE)

	// cut-off parameters
	const std::vector<double> refl_vdistances = {38, 63, 88, 113, 138, 163, 188, 213, 238, 263, 288, 313, 338, 353, 358};
	const std::vector<double> refl_vradial = {9.9, 155.0, 253.8, 360.4, 493.2, 594.6, 695.0, 793.2, 830.7}; 

	const std::vector<std::vector<std::vector<double>>> cut_off_bins = {
		{	{277.925, 300.195, 323.194, 337.127, 356.457, 376.631, 379.829, 389.679, 407.3, 411.075, 416.3, 430.873, 444.438, 444.828, 444.183},
			{280.781, 299.094, 318.371, 337.771, 343.601, 376.726, 378.793, 393.533, 404.948, 408.749, 428.125, 428.106, 443.851, 454.247, 452.386},
			{272.955, 287.868, 315.612, 332.83, 343.61, 361.695, 384.839, 384.802, 393.687, 406.508, 416.722, 436.295, 440.94, 435.406, 427.353},
			{266.213, 286.169, 305.317, 322.234, 339.116, 353.1, 369.47, 387.395, 389.873, 401.44, 412.246, 418.973, 431.127, 433.223, 432.933},
			{247.409, 268.114, 288.126, 296.412, 314.04, 329.173, 352.261, 350.972, 363.387, 376.453, 386.941, 401.131, 395.385, 403.747, 416.479},
			{231.333, 249.152, 266.241, 282.883, 298.496, 310.789, 325.015, 336.381, 351.165, 365.017, 369.807, 381.589, 388.379, 398.604, 393.155},
			{215.951, 233.806, 249.409, 263.34, 275.466, 288.265, 305.086, 305.537, 328.682, 352.241, 358.193, 351.957, 368.924, 370.785, 376.644},
			{190.335, 204.998, 222.027, 231.626, 245.511, 266.44, 276.159, 282.971, 312.679, 315.158, 337.889, 342.993, 364.609, 344.809, 367.018},
			{185.07, 189.483, 221.693, 229.603, 235.155, 251.544, 278.457, 294.77, 298.222, 301.829, 302.87, 312.653, 308.465, 340.038, 333.515}	
		},
		{	{279.461, 305.948, 325.077, 335.378, 355.895, 379.728, 397.783, 404.965, 415.184, 432.305, 420.561, 457.911, 443.975, 437.929, 446.447},
			{280.618, 300.24, 323.936, 339.382, 362.086, 372.157, 381.731, 400.984, 409.12, 426.131, 427.468, 441.98, 454.618, 446.623, 445.324},
			{283.693, 291.051, 319.721, 343.251, 346.5, 363.741, 376.299, 393.218, 400.624, 408.461, 420.343, 434.554, 436.842, 435.464, 444.933},
			{271.467, 288.701, 307.321, 325.263, 341.705, 355.446, 367.246, 381.447, 390.869, 403.198, 418.6, 418.61, 427.138, 428.534, 431.258},
			{251.422, 265.112, 279.148, 299.859, 323.265, 332.044, 345.77, 356.822, 362.79, 381.687, 397.493, 400.013, 413.38, 407.688, 402.544},
			{235.021, 253.075, 271.885, 284.98, 297.973, 317.032, 328.313, 338.463, 357.395, 361.406, 375.863, 394.799, 393.812, 399.75, 390.737},
			{222.69, 239.399, 248.98, 266.016, 278.931, 288.049, 301.677, 318.975, 333.525, 342.609, 357.566, 359.837, 374.858, 376.454, 375.817},
			{200.119, 209.776, 223.743, 239.833, 255.999, 270.081, 291.65, 298.596, 297.684, 338.394, 329.511, 322.817, 348.46, 343.352, 335.317},
			{182.633, 211.08, 199.343, 222.108, 236.185, 262.709, 285.241, 276.237, 286.138, 289.298, 327.387, 350.5, 327.152, 336.483, 314.847}	
		},
		{	{292.376, 318.096, 332.328, 345.919, 364.907, 379.174, 393.618, 406.968, 417.229, 426.992, 429.092, 441.632, 448.698, 457.024, 454.745},
			{290.717, 314.098, 330.885, 344.749, 363.257, 375.829, 390.759, 396.719, 414.969, 427.962, 439.034, 424.442, 446.859, 449.939, 455.853},
			{288.128, 308.224, 322.791, 337.138, 362.174, 363.921, 383.261, 388.403, 412.067, 427.289, 425.825, 447.093, 460.885, 451.107, 444.181},
			{279.616, 298.86, 315.393, 327.726, 347.1, 360.909, 370.65, 383.923, 397.492, 410.617, 417.36, 419.016, 431.382, 437.37, 441.715},
			{262.89, 278.563, 295.571, 309.924, 323.362, 342.411, 354.357, 366.468, 374.957, 382.105, 389.447, 390.519, 419.316, 413.437, 415.55},
			{246.27, 260.811, 277.126, 292.566, 307.828, 325.259, 336.425, 348.232, 360.006, 368.882, 377.069, 389.092, 407.255, 391.869, 410.78},
			{228.97, 248.382, 255.344, 274.406, 285.565, 298.763, 315.075, 333.53, 338.502, 351.803, 356.187, 364.339, 372.213, 379.899, 380.377},
			{212.952, 222.762, 239.045, 249.943, 263.831, 276.623, 311.496, 300.415, 308.869, 326.113, 349.321, 355.824, 358.168, 342.368, 368.499},
			{193.694, 222.535, 220.075, 232.462, 238.297, 264.373, 286.225, 310.05, 283.857, 345.565, 292.389, 342.428, 354.838, 323.72, 427.52}	
		},
		{	{310.546, 331.944, 352.614, 367.072, 377.106, 386.762, 405.268, 414.512, 422.92, 435.151, 449.268, 454.389, 457.723, 473.976, 462.918},
			{310.384, 328.22, 343.592, 357.441, 376.322, 387.134, 398.58, 416.421, 424.031, 429.413, 442.411, 443.785, 458.876, 458.288, 459.373},
			{303.924, 320.066, 335.77, 351.753, 367.668, 381.636, 399.034, 405.953, 418.064, 422.794, 436.744, 439.719, 449.509, 449.691, 459.706},
			{295.505, 313.878, 329.405, 343.417, 358.502, 371.874, 382.495, 395.629, 407.216, 417.819, 426.984, 431.256, 439.359, 439.932, 442.36},
			{274.145, 291.099, 308.019, 321.251, 333.303, 348.279, 362.065, 372.228, 383.536, 391.888, 403.405, 411.821, 423.303, 423.388, 421.06},
			{265.324, 281.396, 297.644, 310.733, 324.711, 337.573, 349.209, 362.877, 370.844, 381.935, 387.304, 398.347, 407.726, 410.708, 412.413},
			{247.62, 262.33, 277.021, 293.91, 302.354, 318.944, 330.024, 343.377, 347.902, 362.556, 364.982, 374.504, 388.569, 393.861, 390.159},
			{229.163, 242.98, 254.283, 264.473, 282.742, 289.181, 301.992, 316.977, 321.581, 330.643, 342.055, 352.321, 359.827, 389.969, 353.219},
			{226.282, 231.092, 243.542, 244.563, 276.347, 274.523, 285.153, 305.421, 310.421, 318.76, 316.547, 339.49, 353.348, 351.716, 367.199}	
		},
		{	{333.993, 354.438, 368.113, 385.712, 399.782, 413.129, 425.062, 432.437, 443.976, 449.172, 460.689, 472.372, 472.111, 476.83, 472.902},
			{328.512, 351.035, 365.532, 380.432, 397.216, 405.12, 415.585, 430.436, 434.664, 449.161, 452.402, 457.632, 469.896, 468.206, 473.472},
			{321.271, 338.957, 352.575, 365.639, 382.266, 392.741, 409.785, 421.874, 425.416, 435.626, 448.928, 443.341, 451.364, 471.786, 451.312},
			{317.473, 335.046, 350.726, 365.251, 377.148, 390.352, 402.024, 413.582, 421.488, 429.765, 440.212, 445.377, 452.404, 458.136, 457.281},
			{300.016, 314.64, 333.593, 341.041, 353.083, 362.598, 378.483, 389.17, 400.636, 406.499, 427.249, 427.004, 428.508, 433.553, 443.859},
			{284.932, 300.597, 313.69, 327.427, 341.844, 353.996, 367.278, 377.411, 384.372, 397.213, 404.689, 416.176, 421.503, 422.87, 424.526},
			{271.122, 285.397, 299.489, 314.841, 325.953, 337.282, 343.319, 357.911, 362.386, 373.1, 382.574, 387.732, 405.372, 399.282, 398.947},
			{246.373, 265.813, 274.812, 279.278, 295.527, 306.051, 327.666, 327.699, 341.129, 356.326, 374.55, 367.839, 372.876, 387.497, 390.245},
			{233.866, 246.881, 273.777, 277.672, 290.437, 304.593, 308.802, 323.322, 332.675, 336.416, 354.733, 328.194, 371.511, 365.182, 344.124}	
		},
		{	{362.818, 382.585, 398.922, 412.119, 427.512, 434.907, 447.102, 452.114, 464.913, 473.955, 470.26, 482.791, 497.014, 483.016, 485.062},
			{356.72, 376.427, 392.402, 406.216, 418.56, 428.826, 440.497, 449.658, 453.805, 463.495, 468.335, 479.811, 485.018, 488.142, 482.902},
			{352.105, 372.532, 385.87, 398.181, 410.112, 421.818, 432.243, 443.771, 449.004, 465.876, 473.669, 469.113, 486.181, 478.43, 477.697},
			{347.657, 364.36, 379.602, 392.937, 402.821, 418.339, 428.596, 436.811, 444.797, 455.081, 459.16, 467.313, 470.581, 473.695, 474.798},
			{333.357, 346.985, 363.516, 379.933, 388.048, 404.148, 409.273, 421.566, 430.298, 440.221, 450.096, 451.605, 460.164, 463.676, 465.564},
			{322.054, 336.679, 350.647, 363.6, 374.721, 389.836, 399.119, 406.06, 419.463, 425.95, 434.951, 436.421, 445.271, 447.296, 446.446},
			{306.067, 321.76, 332.827, 342.812, 356.483, 368.334, 380.585, 390.401, 401.433, 407.101, 415.113, 423.757, 428.387, 430.441, 434.048},
			{290.2, 298.304, 310.889, 320.17, 339.07, 345.395, 360.7, 369.59, 377.432, 383.758, 401.834, 401.849, 402.228, 406.971, 400.675},
			{279.404, 301.775, 298.899, 304.903, 323.855, 332.498, 337.773, 355.718, 358.597, 391.18, 369.707, 398.129, 402.945, 426.174, 333.665}	
		},
		{	{376.832, 397.54, 414.263, 422.725, 437.713, 454.09, 458.263, 467.208, 474.941, 481.848, 490.625, 496.563, 490.807, 490.649, 498.35},
			{385.441, 406.844, 416.556, 432.474, 443.524, 453.045, 470.236, 478.442, 483.99, 492.98, 503.206, 498.888, 501.403, 507.894, 506.447},
			{387.343, 405.746, 420.97, 435.494, 445.772, 463.264, 469.899, 474.802, 489.384, 494.597, 501.39, 506.775, 507.014, 507.38, 509.96},
			{390.626, 404.133, 420.724, 436.572, 448.535, 457.355, 468.517, 477.991, 490.78, 496.107, 498.32, 501.829, 502.974, 504.138, 501.566},
			{378.28, 396.763, 408.164, 425.953, 433.247, 444.452, 457.9, 465.44, 477.159, 479.762, 483.729, 489.371, 489.46, 478.071, 487.085},
			{366.625, 382.781, 395.37, 407.92, 422.853, 432.543, 444.566, 451.843, 457.508, 467.192, 467.628, 473.958, 468.044, 471.101, 473.682},
			{355.481, 372.555, 385.724, 391.278, 408.208, 421.516, 427.61, 435.374, 442.919, 447.307, 449.951, 446.486, 454.988, 442.068, 456.58},
			{341.778, 354.815, 369.275, 379.694, 393.262, 395.803, 401.457, 408.911, 410.357, 425.996, 421.152, 433.113, 433.113, 433.113, 433.113},
			{337.97, 346.918, 356.603, 357.844, 378.073, 379.376, 379.585, 385.655, 393.435, 387.199, 387.199, 387.199, 387.199, 387.199, 387.199}	
		},
		{	{376.832, 397.54, 414.263, 422.725, 437.713, 454.09, 458.263, 467.208, 474.941, 481.848, 490.625, 496.563, 490.807, 490.649, 498.35},
			{385.441, 406.844, 416.556, 432.474, 443.524, 453.045, 470.236, 478.442, 483.99, 492.98, 503.206, 498.888, 501.403, 507.894, 506.447},
			{408.879, 434.486, 442.381, 437.492, 467.027, 449.997, 491.293, 465.36, 477.762, 509.342, 501.005, 557.707, 526.178, 534.217, 510.453},
			{408.955, 422.248, 438.407, 454.35, 461.614, 481.524, 479.141, 493.805, 507.56, 520.625, 519.154, 518.969, 527.859, 524.345, 511.71},
			{394.983, 416.758, 424.778, 434.6, 472.028, 473.905, 492.975, 491.111, 486.645, 486.121, 502.656, 506.563, 493.686, 527.328, 514.333},
			{395.803, 408.97, 425.333, 444.82, 458.173, 460.971, 468.197, 478.129, 484.71, 479.2, 509.285, 487.563, 484.861, 467.71, 494.675},
			{383.776, 401.942, 417.817, 429.337, 434.391, 444.767, 463.51, 456.158, 468.728, 465.569, 452.862, 471.018, 484.71, 499.725, 499.725},
			{371.737, 386.242, 393.455, 404.004, 414.294, 425.8, 463.51, 456.158, 468.728, 465.569, 452.862, 471.018, 484.71, 499.725, 499.725},
			{371.737, 386.242, 393.455, 404.004, 414.294, 425.8, 463.51, 456.158, 468.728, 465.569, 452.862, 471.018, 484.71, 499.725, 499.725}	
		},
		{	{376.832, 397.54, 414.263, 422.725, 437.713, 454.09, 458.263, 467.208, 474.941, 481.848, 490.625, 496.563, 490.807, 490.649, 498.35},
			{385.441, 406.844, 416.556, 432.474, 443.524, 453.045, 470.236, 478.442, 483.99, 492.98, 503.206, 498.888, 501.403, 507.894, 506.447},
			{408.879, 434.486, 442.381, 437.492, 467.027, 449.997, 491.293, 465.36, 477.762, 509.342, 501.005, 557.707, 526.178, 534.217, 510.453},
			{408.955, 422.248, 438.407, 454.35, 461.614, 481.524, 479.141, 493.805, 507.56, 520.625, 519.154, 518.969, 527.859, 524.345, 511.71},
			{394.983, 416.758, 424.778, 434.6, 472.028, 473.905, 492.975, 491.111, 486.645, 486.121, 502.656, 506.563, 493.686, 527.328, 514.333},
			{395.803, 408.97, 425.333, 444.82, 458.173, 460.971, 468.197, 478.129, 484.71, 479.2, 509.285, 487.563, 484.861, 467.71, 494.675},
			{383.776, 401.942, 417.817, 429.337, 434.391, 444.767, 463.51, 456.158, 468.728, 465.569, 452.862, 471.018, 484.71, 499.725, 499.725},
			{371.737, 386.242, 393.455, 404.004, 414.294, 425.8, 463.51, 456.158, 468.728, 465.569, 452.862, 471.018, 484.71, 499.725, 499.725},
			{371.737, 386.242, 393.455, 404.004, 414.294, 425.8, 463.51, 456.158, 468.728, 465.569, 452.862, 471.018, 484.71, 499.725, 499.725}	
		}
	};

	const std::vector<std::vector<std::vector<double>>> tau_bins = {
		{	{6.05151, 5.25942, 5.35564, 4.56474, 3.70246, 3.22511, 3.02161, 2.87285, 2.74765, 2.58733, 2.57111, 2.67508, 2.76859, 3.62686, 3.60927},
			{6.08857, 5.36304, 5.23636, 4.54974, 3.71559, 3.37981, 3.08916, 2.88604, 2.66594, 2.60153, 2.49948, 2.65096, 2.72822, 3.65704, 3.3741},
			{6.25566, 5.55004, 5.46669, 4.79152, 3.9871, 3.42803, 3.21812, 2.97023, 2.87096, 2.67741, 2.48339, 2.66481, 2.73048, 3.57743, 3.36846},
			{6.38811, 5.64568, 5.64273, 4.75491, 3.83361, 3.49253, 3.21018, 3.00294, 2.79026, 2.65016, 2.52068, 2.4484, 2.51099, 3.66168, 3.45049},
			{6.75509, 5.43823, 5.68665, 4.70091, 3.68044, 3.11489, 2.87404, 2.67735, 2.37224, 2.10139, 1.89792, 2.15004, 2.19839, 3.07347, 2.99751},
			{4.6725, 4.76813, 4.81161, 4.04786, 3.03549, 2.2879, 2.33811, 2.23425, 1.95345, 1.74239, 1.68044, 1.66794, 1.7301, 2.65555, 2.63427},
			{4.96114, 4.9329, 4.87924, 4.13732, 2.8161, 2.20023, 2.27418, 2.24264, 1.89881, 1.35375, 1.39515, 1.37641, 1.37061, 2.20584, 2.18167},
			{4.45551, 3.83339, 4.03196, 3.33186, 2.79644, 1.32224, 1.31487, 1.38726, 1.33919, 0.94257, 0.660437, 0.593367, 0.779092, 1.67045, 1.54477},
			{4.55907, 3.66751, 3.75601, 2.97177, 2.6, 1.36436, 0.570367, 1.08864, 1.11522, 1.13544, 0.411707, 0.817749, 0.519531, 1.33152, 1.11451}
		},
		{	{6.26836, 5.61401, 5.42107, 4.62607, 3.76292, 3.49826, 3.20505, 3.06393, 2.85517, 2.6903, 2.5193, 2.74017, 2.82957, 3.86635, 3.59675},
			{6.29903, 5.64077, 5.53901, 4.56827, 3.83229, 3.56384, 3.23987, 3.00512, 2.84228, 2.67983, 2.54463, 2.71951, 2.76082, 3.69772, 3.67212},
			{6.48091, 5.8071, 5.47309, 4.79581, 3.77029, 3.47981, 3.12193, 3.13794, 2.82384, 2.7819, 2.58296, 2.64179, 2.7002, 3.6183, 3.58242},
			{6.59476, 5.9222, 5.76528, 4.78912, 3.82749, 3.5728, 3.29049, 2.98354, 2.78677, 2.63313, 2.47168, 2.51105, 2.58782, 3.56291, 3.64009},
			{6.33743, 5.46008, 5.48132, 4.48534, 3.46841, 3.08942, 2.908, 2.68137, 2.2305, 2.02168, 1.93375, 2.04354, 2.03494, 2.95582, 3.0374},
			{4.97732, 4.9801, 4.81146, 3.89959, 2.84995, 2.40426, 2.40086, 2.24148, 2.02914, 1.78835, 1.6947, 1.65948, 1.81489, 2.72625, 2.70869},
			{5.07868, 5.14736, 4.85888, 3.76102, 2.76789, 2.35198, 2.41388, 2.22592, 1.82338, 1.41707, 1.31442, 1.49068, 1.5034, 2.34233, 2.30977},
			{3.93809, 4.29479, 4.27285, 3.7472, 2.70357, 1.23684, 1.69084, 1.73348, 1.46425, 1.08465, 0.707854, 0.642938, 0.778727, 1.87856, 1.83754},
			{3.62809, 3.88013, 3.75494, 3.13396, 2.40241, 1.2416, 1.13603, 1.09919, 1.02651, 1.04059, 0.660282, 0.231652, 0.44331, 1.43059, 1.47316}
		},
		{	{6.69834, 5.94711, 5.74882, 4.85702, 3.94993, 3.75972, 3.44221, 3.2451, 3.06586, 2.87054, 2.79792, 2.76892, 2.94593, 3.86259, 3.87156},
			{6.79118, 5.97697, 5.8095, 4.76622, 3.98697, 3.67504, 3.40562, 3.22725, 3.1537, 2.83691, 2.83571, 2.80578, 2.96931, 3.92508, 4.26989},
			{7.11186, 6.12417, 5.93389, 4.78782, 4.07871, 3.85848, 3.50931, 3.11704, 2.98644, 2.96285, 2.76286, 2.61628, 2.8515, 4.01134, 3.75474},
			{7.07731, 6.26805, 6.13103, 4.92465, 4.01295, 3.80467, 3.48545, 3.16571, 2.90003, 2.65869, 2.57971, 2.63314, 2.65506, 3.79186, 3.67776},
			{6.84653, 5.9996, 6.09289, 4.48593, 3.62964, 3.32208, 2.9984, 2.7828, 2.4004, 2.23671, 2.07326, 2.12234, 2.13726, 3.12278, 3.2214},
			{5.86541, 5.28445, 4.90775, 3.64724, 2.90324, 2.71651, 2.63771, 2.40796, 2.06309, 1.84462, 1.79494, 1.82231, 1.90374, 2.90873, 2.81587},
			{5.89898, 5.4385, 5.24646, 3.69105, 2.69687, 2.59482, 2.55845, 2.24871, 1.73629, 1.47559, 1.45768, 1.43456, 1.54127, 2.45157, 2.47905},
			{5.26544, 4.70116, 4.80365, 3.5188, 1.97788, 1.66775, 2.14569, 1.86983, 1.27234, 1.01141, 0.85588, 0.790124, 1.12199, 1.87551, 1.68622},
			{4.7, 4.06344, 4.11029, 3.24248, 2.23768, 1.5, 1.44779, 1.2, 1.2841, 0.685768, 0.680986, 0.6, 0.816295, 1.3656, 0.832061}
		},
		{	{7.39727, 6.70581, 6.53681, 5.29301, 4.69689, 4.3033, 3.91958, 3.69701, 3.44253, 3.25843, 3.00687, 2.96093, 3.23835, 4.50707, 4.53773},
			{7.5071, 6.76267, 6.55066, 5.32967, 4.64829, 4.31907, 3.92645, 3.62285, 3.35403, 3.10783, 3.05299, 3.12903, 3.22707, 4.74144, 4.63428},
			{7.75013, 7.0093, 6.73731, 5.3464, 4.67141, 4.35729, 3.95508, 3.59011, 3.24105, 3.05923, 3.00551, 3.04304, 3.05577, 4.62761, 4.30391},
			{7.9214, 7.31891, 7.0864, 5.24949, 4.64706, 4.29022, 3.76974, 3.41593, 3.11456, 2.90355, 2.81711, 2.84056, 2.91526, 4.25572, 4.20645},
			{7.87413, 7.4527, 6.9471, 4.7422, 4.16339, 3.89249, 3.321, 2.86099, 2.64759, 2.41145, 2.28044, 2.31181, 2.39974, 3.31546, 3.27189},
			{7.05786, 6.40807, 5.69455, 4.10625, 3.63614, 3.42641, 2.99095, 2.61766, 2.34773, 2.17226, 2.11036, 2.14653, 2.21173, 3.12419, 3.04372},
			{7.5498, 6.98169, 5.58721, 3.80163, 3.44318, 3.29335, 2.87762, 2.3011, 1.96188, 1.82687, 1.75709, 1.71226, 1.78831, 2.60847, 2.52843},
			{6.08547, 5.72152, 4.96601, 3.09916, 2.64496, 2.61632, 2.43237, 1.98678, 1.37929, 1.19978, 1.08114, 1.22555, 1.35756, 2.15777, 2.21013},
			{5.37897, 4.78984, 4.43677, 2.96836, 2.2646, 1.98018, 1.88418, 1.69672, 1.36468, 1.08269, 0.805105, 1.09283, 1.07004, 1.70972, 1.67868}
		},
		{	{10.7907, 9.86427, 10.2734, 7.36725, 6.28097, 5.24954, 4.73566, 4.46749, 4.09965, 3.85829, 3.80077, 3.79592, 3.98558, 6.98321, 7.01146},
			{10.7183, 9.96038, 10.1869, 7.39484, 6.37805, 5.18832, 4.64819, 4.30611, 3.82131, 3.67283, 3.66214, 3.69426, 3.90608, 7.17018, 7.30761},
			{10.0544, 8.64034, 9.06175, 6.35312, 5.65377, 4.80871, 4.19539, 3.89209, 3.55467, 3.35782, 3.31109, 3.29005, 3.28975, 5.50798, 5.34917},
			{11.0687, 10.1184, 9.68446, 7.18418, 6.35758, 4.99787, 4.36325, 3.98334, 3.65197, 3.42018, 3.30908, 3.32442, 3.39185, 6.04319, 5.8658},
			{10.3936, 9.32469, 8.07041, 5.8761, 5.46385, 4.36997, 3.66553, 3.33075, 3.09706, 2.8102, 2.81761, 2.79966, 2.80751, 4.11076, 4.25512},
			{9.11132, 7.44223, 6.30499, 5.00773, 4.5435, 3.75131, 3.26623, 2.96308, 2.70258, 2.51275, 2.40677, 2.45192, 2.52868, 3.57756, 3.50549},
			{8.70491, 7.25704, 5.72058, 4.6579, 4.15114, 3.57687, 3.04742, 2.73344, 2.41051, 2.21792, 2.05126, 2.14923, 2.19831, 3.06155, 2.96569},
			{9.11417, 5.32072, 4.38454, 3.8806, 3.47001, 3.06426, 2.44069, 1.97168, 1.75259, 1.64771, 1.59257, 1.5897, 1.55292, 2.40271, 2.50061},
			{5.59545, 5.03187, 4.17622, 3.26049, 2.97259, 2.29662, 2.1778, 1.67287, 1.31328, 1.00092, 1.21758, 1.25281, 1.12499, 1.96028, 1.87549}
		},
		{	{13.5133, 13.4624, 13.4477, 12.4167, 11.1934, 9.66648, 9.10297, 8.26262, 6.87662, 6.43314, 6.71724, 6.87164, 7.07001, 10.1681, 10.007},
			{13.4894, 13.1857, 13.0856, 11.6023, 10.5568, 8.85676, 8.35647, 7.12727, 6.22286, 6.11131, 6.08362, 6.30468, 6.43843, 9.7944, 8.98618},
			{13.1765, 12.7833, 12.6034, 11.3389, 10.2778, 8.76164, 7.547, 6.46764, 5.99648, 5.46991, 5.47219, 5.51576, 5.98918, 9.09674, 8.91708},
			{13.2313, 13.1427, 12.9037, 11.4617, 10.2087, 8.37644, 7.44947, 6.28239, 5.54734, 5.17827, 5.13648, 5.2411, 5.60394, 8.95111, 8.57007},
			{12.5111, 11.8648, 12.0099, 9.90982, 8.12813, 6.72132, 5.83363, 4.92258, 4.26782, 4.12168, 3.97227, 4.09212, 4.26035, 7.28792, 6.68603},
			{11.9013, 11.0418, 10.8528, 8.42775, 6.95652, 5.66721, 4.75906, 4.18003, 3.70304, 3.53835, 3.45942, 3.53425, 3.57815, 6.10555, 5.81056},
			{10.7849, 10.1825, 9.97619, 7.4645, 5.79909, 4.75138, 4.01882, 3.53285, 3.12712, 2.98585, 2.78071, 2.88773, 2.75948, 4.8105, 4.43618},
			{8.90587, 7.26375, 7.32865, 4.70949, 4.03246, 3.44272, 3.15696, 2.781, 2.42965, 2.30608, 2.17785, 2.24166, 2.21278, 3.2685, 3.34136},
			{6.96085, 6.00204, 5.42375, 4.2645, 3.57265, 3.15849, 2.7057, 2.35586, 1.94717, 1.93662, 1.78694, 1.82098, 2.0535, 2.63766, 2.39969}
		},
		{	{13.5383, 13.2894, 13.1035, 12.9292, 12.4912, 11.8111, 11.2786, 10.7181, 10.4831, 9.8408, 9.42824, 9.51733, 9.71465, 10.4356, 10.5224},
			{13.4249, 13.2184, 12.9565, 12.7064, 12.1967, 11.7779, 11.3031, 10.7521, 10.6686, 10.1903, 9.42147, 10.1134, 9.78413, 10.7332, 10.5265},
			{13.3689, 13.296, 13.0155, 12.7127, 12.3829, 11.9581, 11.4953, 11.1456, 10.5251, 10.1513, 10.076, 10.3119, 9.87932, 10.6632, 10.5471},
			{13.3805, 13.1471, 12.9444, 12.6127, 12.319, 11.599, 11.1976, 10.7766, 10.3559, 9.93643, 9.71688, 9.71536, 9.78375, 10.6411, 10.363},
			{13.2322, 12.9619, 12.9217, 12.619, 12.0123, 11.1316, 10.4829, 10.2185, 9.68203, 9.53351, 9.20735, 9.32665, 9.09006, 10.4681, 10.3181},
			{13.0833, 12.7368, 12.5123, 11.8968, 11.2549, 10.1944, 9.49616, 8.89579, 8.27834, 7.99512, 7.8081, 8.18009, 7.98177, 9.71341, 9.33295},
			{12.9877, 12.6511, 12.4476, 11.5531, 10.7141, 9.46861, 8.71311, 8.25621, 7.61, 7.1982, 7.14387, 7.23378, 7.40893, 9.17239, 8.83719},
			{12.66, 12.1177, 11.6869, 10.1918, 8.95621, 7.53124, 6.7414, 6.13135, 5.74551, 5.76844, 5.58981, 5.68075, 5.69869, 7.95075, 7.24576},
			{12.0348, 10.9679, 10.7039, 9.17221, 8.03413, 6.84133, 5.71657, 5.59323, 5.25361, 5.27928, 5.14923, 5.24035, 5.78287, 7.548, 7.09363}
		},
		{	{13.5383, 13.2894, 13.1035, 12.9292, 12.4912, 11.8111, 11.2786, 10.7181, 10.4831, 9.8408, 9.42824, 9.51733, 9.71465, 10.4356, 10.5224},
			{13.4249, 13.2184, 12.9565, 12.7064, 12.1967, 11.7779, 11.3031, 10.7521, 10.6686, 10.1903, 9.42147, 10.1134, 9.78413, 10.7332, 10.5265},
			{12.9081, 13.0753, 12.262, 12.5194, 12.2546, 11.4089, 12.209, 12.5351, 10.8744, 10.796, 10.2513, 10.124, 11.1215, 10.2929, 9.75678},
			{13.2778, 13.0837, 12.9184, 12.4531, 12.0314, 11.687, 11.8391, 11.3957, 10.9502, 10.8812, 10.6484, 10.5015, 10.5753, 10.7584, 10.6783},
			{13.0482, 12.8998, 12.7181, 12.2843, 12.0018, 11.9921, 11.5667, 11.4506, 10.6953, 10.6635, 10.2276, 10.1699, 10.0777, 10.3182, 10.5843},
			{12.9935, 12.8001, 12.4314, 12.18, 11.8915, 11.333, 11.3303, 10.8265, 10.6398, 10.3935, 10.2812, 10.0102, 9.97706, 10.4063, 10.2905},
			{12.9416, 12.5537, 12.5225, 12.0177, 11.7131, 10.9363, 10.7226, 10.8618, 10.3018, 10.0954, 10.0445, 9.91044, 9.59012, 9.96096, 9.75323},
			{12.7864, 12.587, 12.5667, 11.8594, 11.6633, 10.8552, 10.4861, 10.381, 9.30444, 9.166, 8.94485, 9.09151, 8.90181, 8.75764, 9.01746},
			{12.8542, 12.7943, 12.2432, 11.6743, 10.7326, 10.2805, 9.11267, 8.6639, 8.49278, 8.9174, 8.27041, 8.15833, 8.08102, 8.3114, 8.64852}
		},
		{	{13.5383, 13.2894, 13.1035, 12.9292, 12.4912, 11.8111, 11.2786, 10.7181, 10.4831, 9.8408, 9.42824, 9.51733, 9.71465, 10.4356, 10.5224},
			{13.4249, 13.2184, 12.9565, 12.7064, 12.1967, 11.7779, 11.3031, 10.7521, 10.6686, 10.1903, 9.42147, 10.1134, 9.78413, 10.7332, 10.5265},
			{12.9081, 13.0753, 12.262, 12.5194, 12.2546, 11.4089, 12.209, 12.5351, 10.8744, 10.796, 10.2513, 10.124, 11.1215, 10.2929, 9.75678},
			{13.2778, 13.0837, 12.9184, 12.4531, 12.0314, 11.687, 11.8391, 11.3957, 10.9502, 10.8812, 10.6484, 10.5015, 10.5753, 10.7584, 10.6783},
			{13.0482, 12.8998, 12.7181, 12.2843, 12.0018, 11.9921, 11.5667, 11.4506, 10.6953, 10.6635, 10.2276, 10.1699, 10.0777, 10.3182, 10.5843},
			{12.9935, 12.8001, 12.4314, 12.18, 11.8915, 11.333, 11.3303, 10.8265, 10.6398, 10.3935, 10.2812, 10.0102, 9.97706, 10.4063, 10.2905},
			{12.9416, 12.5537, 12.5225, 12.0177, 11.7131, 10.9363, 10.7226, 10.8618, 10.3018, 10.0954, 10.0445, 9.91044, 9.59012, 9.96096, 9.75323},
			{12.7864, 12.587, 12.5667, 11.8594, 11.6633, 10.8552, 10.4861, 10.381, 9.30444, 9.166, 8.94485, 9.09151, 8.90181, 8.75764, 9.01746},
			{12.8542, 12.7943, 12.2432, 11.6743, 10.7326, 10.2805, 9.11267, 8.6639, 8.49278, 8.9174, 8.27041, 8.15833, 8.08102, 8.3114, 8.64852}
		}
	};

	const double pi =  3.141592653589793;


public:
	// constructor
	time_parameterisation(const double &step);

	// destructor
	~time_parameterisation(){};

	// parameterisation generation function
	// generates TF1 and samples within required range for given distance (index), saving this object for later use
	void generateparam(const int &index, const int &angle_bin);

    // VUV arrival times calculation function
    // returns an arrival time for each photon randomly drawn from the pre-sampled parameterisations 
    std::vector<double> getVUVTime(const double &distance, const int &angle_bin, const int &number_photons);
    std::vector<double> getVUVTimeXe(const double &distance, const int &number_photons);

    // VIS arrival times calculation function
    // returns an arrival time for each photon randomly drawn from the pre-sampled VUV parameterisations and smeared to approximate visible light distribution
    std::vector<double> getVisTime(const TVector3 &ScintPoint, const TVector3 &OpDetPoint, const int &number_photons);
    std::vector<double> getVisTimeXe(const TVector3 &ScintPoint, const TVector3 &OpDetPoint, const int &number_photons);

    double getVUVmin(const int &index, const int &angle_bin);
};

#endif